<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
        <list>
                <value>classpath:database.properties</value>
                <value>classpath:kafka.properties</value>
            </list>
        </property>
    </bean>

    <context:property-placeholder/>

    <bean id="hsqldbServer" class="org.openspaces.persistency.utils.HsqlServerBean">
        <property name="dataSource">
            <ref local="dataSource"/>
        </property>
        <property name="serverProperties">
            <props>
                <prop key="server.database.0">${java.io.tmpdir}/hsql</prop>
                <prop key="server.dbname.0">testDB</prop>
            </props>
        </property>
    </bean>

    <!--
        A JDBC datasource pool that connects to HSQL.
    -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
          depends-on="hsqldbServer">
        <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
        <property name="url" value="jdbc:hsqldb:hsql://localhost/testDB"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

    <!--
        Hibernate SessionFactory bean. Uses the pooled data source to connect to the database.
    -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="annotatedClasses">
            <list>
                <value>com.epam.common.Data</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <!-- Kafka Consumer, wrapper around native Kafka producer API -->
	<bean id="kafkaConsumer" class="com.epam.openspaces.persistency.kafka.consumer.KafkaConsumerFactoryBean">
		<property name="consumerProperties">
			<props>
                <!-- Kafka consumer properties. Consult Kafka documentation for a list of available properties -->
				<prop key="zookeeper.connect">${zookeeper.connect}</prop>
				<prop key="group.id">${group.id}</prop>
				<prop key="zookeeper.session.timeout.ms">${zookeeper.session.timeout.ms}</prop>
				<prop key="zookeeper.sync.time.ms">${zookeeper.sync.time.ms}</prop>
				<prop key="auto.commit.interval.ms">${auto.commit.interval.ms}</prop>
			</props>
		</property>
	</bean>

    <!-- Consumer which implements business logic, consumes data from Kafka and saves to database using Hibernate -->
	<bean id="consumer" class="com.epam.consumer.Consumer">
		<property name="consumer" ref="kafkaConsumer" />
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

</beans>